// <auto-generated />
using System;
using KPBrokers.Submission.Quote.DAL.DatabaseEntities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KPBrokers.Submission.Quote.DAL.Migrations
{
    [DbContext(typeof(KPBDbContext))]
    [Migration("20241107040619_UpdateIdentityMappings")]
    partial class UpdateIdentityMappings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AddressId");

                    b.HasIndex("CountryId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DBA")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SecondaryAgentId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AgentId");

                    b.HasIndex("AddressId");

                    b.ToTable("Agent", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.AgentContact", b =>
                {
                    b.Property<int>("AgentContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentContactId"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SecondaryAgentContactId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AgentContactId");

                    b.HasIndex("AgentId");

                    b.HasIndex("TitleId");

                    b.ToTable("AgentContact", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.AuditAction", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ActionId");

                    b.ToTable("AuditAction", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.AuditTrail", b =>
                {
                    b.Property<int>("AuditTrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditTrailId"));

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ActionPerformedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActionPerformedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("AuditTrailId");

                    b.HasIndex("ActionId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("AuditTrail", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.AuthenticationService", b =>
                {
                    b.Property<int>("AuthenticationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthenticationId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AuthenticationId");

                    b.ToTable("AuthenticationService", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Broker", b =>
                {
                    b.Property<int>("BrokerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrokerId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DBA")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BrokerId");

                    b.HasIndex("AddressId");

                    b.ToTable("Broker", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.BrokerContact", b =>
                {
                    b.Property<int>("BrokerContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrokerContactId"));

                    b.Property<int>("BrokerId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BrokerContactId");

                    b.HasIndex("BrokerId");

                    b.HasIndex("TitleId");

                    b.ToTable("BrokerContact", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Carrier", b =>
                {
                    b.Property<int>("CarrierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarrierId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DBA")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CarrierId");

                    b.HasIndex("AddressId");

                    b.ToTable("Carrier", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.CarrierContact", b =>
                {
                    b.Property<int>("CarrierContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarrierContactId"));

                    b.Property<int>("CarrierId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CarrierContactId");

                    b.HasIndex("CarrierId");

                    b.HasIndex("TitleId");

                    b.ToTable("CarrierContact", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryId");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Coverage", b =>
                {
                    b.Property<int>("CoverageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoverageId"));

                    b.Property<string>("CoverageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CoverageId");

                    b.ToTable("Coverage", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DriverLicenceExpiry")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DriverLicenceIssued")
                        .HasColumnType("datetime");

                    b.Property<string>("DriverLicenceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("DriverId");

                    b.ToTable("Driver", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Insured", b =>
                {
                    b.Property<int>("InsuredId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuredId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DBA")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InsuredName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MCDocketNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MainContactEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MainContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MainContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("InsuredId");

                    b.HasIndex("AddressId");

                    b.ToTable("Insured", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Log", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<string>("ErrorClass")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMethod")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ErrorSource")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("EventDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("EventLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EventMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LogID")
                        .HasName("PK__Logs__5E5499A8EF101872");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Metadata", b =>
                {
                    b.Property<int>("MetadataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetadataId"));

                    b.Property<string>("MetadataName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MetadataId");

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.QuoteDocument", b =>
                {
                    b.Property<int>("QuoteDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteDocumentId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("DocumentBinary")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentSize")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("QuoteDocumentId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("QuoteDocument", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Roles");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("BrokerId")
                        .HasColumnType("int");

                    b.Property<int?>("CarrierId")
                        .HasColumnType("int");

                    b.Property<int>("CoverageId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InsuredId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PossibleExpityDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PossibleInceptionDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Premium")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("QuotedReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SubmittedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("SubmissionId");

                    b.HasIndex("AgentId");

                    b.HasIndex("BrokerId");

                    b.HasIndex("CarrierId");

                    b.HasIndex("CoverageId");

                    b.HasIndex("InsuredId");

                    b.HasIndex("StatusId");

                    b.ToTable("Submission", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.SubmissionUnit", b =>
                {
                    b.Property<int>("SubmissionUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionUnitId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("SubmissionUnitId");

                    b.HasIndex("DriverId");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("VehicleId");

                    b.ToTable("SubmissionUnit", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.SystemLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ErrorClass")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorSource")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("EventLevel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EventMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_Logs");

                    b.ToTable("SystemLogs");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Title", b =>
                {
                    b.Property<int>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TitleId"));

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TitleId");

                    b.ToTable("Title", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Users");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.UserAccount", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MembershipId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId");

                    b.HasIndex("MembershipId");

                    b.ToTable("UserAccount", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.UserClaims");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PK_dbo.UserLogins");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("LossPayee")
                        .HasColumnType("bit");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("PhysicalDamaged")
                        .HasColumnType("bit");

                    b.Property<string>("RegNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicle", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_dbo.UserRoles");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Address", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Address_Country");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Agent", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Address", "Address")
                        .WithMany("Agents")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_Agent_Address");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.AgentContact", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Agent", "Agent")
                        .WithMany("AgentContacts")
                        .HasForeignKey("AgentId")
                        .IsRequired()
                        .HasConstraintName("FK_AgentContact_Agent");

                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Title", "Title")
                        .WithMany("AgentContacts")
                        .HasForeignKey("TitleId")
                        .IsRequired()
                        .HasConstraintName("FK_AgentContact_Title");

                    b.Navigation("Agent");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.AuditTrail", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.AuditAction", "Action")
                        .WithMany("AuditTrails")
                        .HasForeignKey("ActionId")
                        .IsRequired()
                        .HasConstraintName("FK_AuditTrail_AuditAction");

                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Submission", "Submission")
                        .WithMany("AuditTrails")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("FK_AuditTrail_Submission");

                    b.Navigation("Action");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Broker", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Address", "Address")
                        .WithMany("Brokers")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_Broker_Address");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.BrokerContact", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Broker", "Broker")
                        .WithMany("BrokerContacts")
                        .HasForeignKey("BrokerId")
                        .IsRequired()
                        .HasConstraintName("FK_BrokerContact_Broker");

                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Title", "Title")
                        .WithMany("BrokerContacts")
                        .HasForeignKey("TitleId")
                        .IsRequired()
                        .HasConstraintName("FK_BrokerContact_Title");

                    b.Navigation("Broker");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Carrier", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Address", "Address")
                        .WithMany("Carriers")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_Carrier_Address");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.CarrierContact", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Carrier", "Carrier")
                        .WithMany("CarrierContacts")
                        .HasForeignKey("CarrierId")
                        .IsRequired()
                        .HasConstraintName("FK_CarrierContact_Carrier");

                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Title", "Title")
                        .WithMany("CarrierContacts")
                        .HasForeignKey("TitleId")
                        .IsRequired()
                        .HasConstraintName("FK_CarrierContact_Title");

                    b.Navigation("Carrier");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Insured", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Address", "Address")
                        .WithMany("Insureds")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_Insured_Address");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.QuoteDocument", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Submission", "Submission")
                        .WithMany("QuoteDocuments")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("FK_QuoteDocument_Submission");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Submission", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Agent", "Agent")
                        .WithMany("Submissions")
                        .HasForeignKey("AgentId")
                        .IsRequired()
                        .HasConstraintName("FK_Submission_Agent");

                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Broker", "Broker")
                        .WithMany("Submissions")
                        .HasForeignKey("BrokerId")
                        .IsRequired()
                        .HasConstraintName("FK_Submission_Broker");

                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Carrier", "Carrier")
                        .WithMany("Submissions")
                        .HasForeignKey("CarrierId")
                        .HasConstraintName("FK_Submission_Carrier");

                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Coverage", "Coverage")
                        .WithMany("Submissions")
                        .HasForeignKey("CoverageId")
                        .IsRequired()
                        .HasConstraintName("FK_Submission_Coverage");

                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Insured", "Insured")
                        .WithMany("Submissions")
                        .HasForeignKey("InsuredId")
                        .IsRequired()
                        .HasConstraintName("FK_Submission_Insured");

                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Status", "Status")
                        .WithMany("Submissions")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Submission_Status");

                    b.Navigation("Agent");

                    b.Navigation("Broker");

                    b.Navigation("Carrier");

                    b.Navigation("Coverage");

                    b.Navigation("Insured");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.SubmissionUnit", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Driver", "Driver")
                        .WithMany("SubmissionUnits")
                        .HasForeignKey("DriverId")
                        .IsRequired()
                        .HasConstraintName("FK_SubmissionUnit_Driver");

                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Submission", "Submission")
                        .WithMany("SubmissionUnits")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("FK_SubmissionUnit_Submission");

                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Vehicle", "Vehicle")
                        .WithMany("SubmissionUnits")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("FK_SubmissionUnit_Vehicle");

                    b.Navigation("Driver");

                    b.Navigation("Submission");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.UserAccount", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.User", "Membership")
                        .WithMany("UserAccounts")
                        .HasForeignKey("MembershipId")
                        .IsRequired()
                        .HasConstraintName("FK_UserAccount_Users");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.UserClaim", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.UserClaims_dbo.Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.UserLogin", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.UserLogins_dbo.Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.UserRoles_dbo.Roles_RoleId");

                    b.HasOne("KPBrokers.Submission.Quote.DAL.DatabaseEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.UserRoles_dbo.Users_UserId");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Address", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("Brokers");

                    b.Navigation("Carriers");

                    b.Navigation("Insureds");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Agent", b =>
                {
                    b.Navigation("AgentContacts");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.AuditAction", b =>
                {
                    b.Navigation("AuditTrails");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Broker", b =>
                {
                    b.Navigation("BrokerContacts");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Carrier", b =>
                {
                    b.Navigation("CarrierContacts");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Coverage", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Driver", b =>
                {
                    b.Navigation("SubmissionUnits");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Insured", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Status", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Submission", b =>
                {
                    b.Navigation("AuditTrails");

                    b.Navigation("QuoteDocuments");

                    b.Navigation("SubmissionUnits");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Title", b =>
                {
                    b.Navigation("AgentContacts");

                    b.Navigation("BrokerContacts");

                    b.Navigation("CarrierContacts");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.User", b =>
                {
                    b.Navigation("UserAccounts");

                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");
                });

            modelBuilder.Entity("KPBrokers.Submission.Quote.DAL.DatabaseEntities.Vehicle", b =>
                {
                    b.Navigation("SubmissionUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
